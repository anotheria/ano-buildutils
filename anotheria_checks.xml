<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<module name="Checker">
    <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

    <!-- Checks that a package-info.java file exists for each package.     -->
    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
    <module name="JavadocPackage" >
    	<property name="severity" value="info"/>
    </module>

    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <module name="NewlineAtEndOfFile">
       	<property name="severity" value="info"/>
    </module>

    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <module name="Translation"/>

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <module name="FileLength"/>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->

    <!-- removed as baloney module name="FileTabCharacter"/-->

    <!-- Miscellaneous other checks.                   -->
    <!-- See http://checkstyle.sf.net/config_misc.html -->
    <!--  i think this one is very stupid :-)
    <module name="RegexpSingleline">
       <property name="format" value="\s+$"/>
       <property name="minimum" value="0"/>
       <property name="maximum" value="0"/>
       <property name="message" value="Line has trailing spaces."/>
    </module>
    -->

    <module name="TreeWalker">

        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <module name="JavadocMethod">
        	<property name="allowMissingParamTags" value="true"/>
        	<property name="allowMissingReturnTag" value="false"/>
         	<property name="severity" value="warning"/>
        </module>
        <module name="JavadocType"/>
        <module name="JavadocVariable"/>
        <module name="JavadocStyle">
         	<property name="severity" value="warning"/>
        </module>

		<module name="MissingJavadocMethodCheck">
		  <property name="allowMissingPropertyJavadoc" value="true"/>
		  <property name="scope" value="protected"/>
       	<property name="severity" value="warning"/>
		</module>

        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <!--  module name="ConstantName"/ - this is a stupid check, not everything that is static and final is a constant -->
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName"/>
        <module name="MemberName"/>
        <module name="MethodName"/>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <module name="StaticVariableName"/>
        <module name="TypeName"/>


        <!-- Checks for Headers                                -->
        <!-- See http://checkstyle.sf.net/config_header.html   -->
        <!-- <module name="Header">                            -->
            <!-- The follow property value demonstrates the ability     -->
            <!-- to have access to ANT properties. In this case it uses -->
            <!-- the ${basedir} property to allow Checkstyle to be run  -->
            <!-- from any directory within a project. See property      -->
            <!-- expansion,                                             -->
            <!-- http://checkstyle.sf.net/config.html#properties        -->
            <!-- <property                                              -->
            <!--     name="headerFile"                                  -->
            <!--     value="${basedir}/java.header"/>                   -->
        <!-- </module> -->


        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport"/>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>


        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <!-- stupid! <module name="LineLength"/>  -->
        <module name="MethodLength"/>
        <module name="ParameterNumber"/>


        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="GenericWhitespace">
        	<property name="severity" value="info"/>
        </module>
        <module name="MethodParamPad">
        	<property name="severity" value="info"/>
        </module>
        <!-- module name="NoWhitespaceAfter"/>
        <module name="NoWhitespaceBefore"/-->
        <!--  module name="OperatorWrap"/-->
        <!-- module name="ParenPad"/>
        <module name="TypecastParenPad"/-->
        <!-- module name="WhitespaceAfter"/-->
        <!-- removed termorarly <module name="WhitespaceAround"/> -->


        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder">
        	<property name="severity" value="info"/>
        </module>
        <module name="RedundantModifier">
        	<property name="severity" value="warning"/>
        </module>


        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks"/>
        <module name="EmptyBlock">
        	<property name="severity" value="warning"/>
        </module>
        <module name="LeftCurly"/>
        <!--  arguably module name="NeedBraces"/-->
        <module name="RightCurly"/>


        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!--  module name="AvoidInlineConditionals"/> -->
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <module name="HiddenField">
                <property name="ignoreSetter" value="true"/>
                <property name="ignoreConstructorParameter" value="true"/>
        </module>
        <module name="InnerAssignment">
        	<property name="severity" value="warning"/>
        </module>
<!--  removed, since this rule leads to 'evil' code: public static final int FOUR = 4;
        <module name="MagicNumber">
         	<property name="severity" value="info"/>
        </module>
         -->
        <module name="MissingSwitchDefault"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!-- this is baloney module name="DesignForExtension"/> -->
        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor">
         	<property name="severity" value="info"/>
        </module>
        <module name="InterfaceIsType"/>
        <module name="VisibilityModifier"/>


        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <module name="ArrayTypeStyle">
         	<property name="severity" value="info"/>
        </module>
        <!-- to be reincluded later module name="FinalParameters"/> -->
        <module name="TodoComment">
            <property name="severity" value="info" />
            <property name="format" value="TODO|FIXME|todo|XXX" />
        </module>
        <module name="UpperEll"/>


        <!-- enforce either "//fall-through" or "break" in case statements -->
        <module name="FallThrough">
            <property name="severity" value="error" />
        </module>

        <!-- enforce "string".equals(var) idiom (lro: removed!) -->
	    <!-- <module name="EqualsAvoidNull">
	    <property name="severity" value="info" />
        </module> -->

        <!-- ensure super() call in clone() and finalize() -->
        <module name="SuperClone">
            <property name="severity" value="error"/>
        </module>
        <module name="SuperFinalize">
            <property name="severity" value="error"/>
        </module>


        <!-- Don't allow new Long/Integer/... -->
	<module name="IllegalInstantiation">
	    <property name="severity" value="warning" />
	    <property name="classes" value="java.lang.Long,java.lang.Integer,java.lang.Float,java.lang.Double,java.lang.Boolean" />
	</module>

        <!-- throws declaration should declare specific exception -->
        <module name="IllegalThrows">
            <property name="severity" value="error" />
            <property name="illegalClassNames" value="java.lang.Throwable, java.lang.Error, java.lang.Exception, java.lang.RuntimeException" />
        </module>

        <!-- warn when cathcing Exception -->
        <module name="IllegalCatch">
            <property name="severity" value="warning" />
            <property name="illegalClassNames"
                value="java.lang.Exception, java.lang.RuntimeException" />
        </module>
        <!-- Error when catching java.lang.Throwable, java.lang.Error -->
        <module name="IllegalCatch">
            <property name="severity" value="error" />
            <property name="illegalClassNames" value="java.lang.Throwable, java.lang.Error" />
        </module>
		
		<module name="SuppressionCommentFilter">
		  <property name="offCommentFormat" value="BEGIN GENERATED CODE"/>
		  <property name="onCommentFormat" value="END GENERATED CODE"/>
		</module>
	    <module name="SuppressionCommentFilter">
	        <property name="offCommentFormat" value="CHECKSTYLE\:\s*OFF\s*"/>
		    <property name="onCommentFormat" value="CHECKSTYLE\:\s*ON\s*"/>
	     </module>
	     <module name="SuppressionCommentFilter">
	         <property name="offCommentFormat" value="CSOFF\:\s*(\S+)\s*"/>
	 	    <property name="onCommentFormat" value="CSON\:\s*(\S+)\s*"/>
	 	    <property name="checkFormat" value="$1"/>
	     </module>
        
    </module>

    <!-- Checks properties file for a duplicated properties. -->
    <!-- See http://checkstyle.sourceforge.net/config_misc.html#UniqueProperties -->
    <module name="UniqueProperties"/>

</module>
